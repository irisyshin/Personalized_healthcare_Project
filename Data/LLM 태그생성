# ===============================================
# 🔹 recipe_by_type_cleaned.csv의 tag 결측치 및 [] 값 채우기 (LLM 자동 보완)
# ===============================================

import os
import pandas as pd
from openai import OpenAI
from dotenv import load_dotenv
from tqdm import tqdm

# ---------------------------
# 1. 환경설정 및 API 초기화
# ---------------------------
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ---------------------------
# 2. CSV 파일 로드
# ---------------------------
file_path = "recipe_by_type_cleaned.csv"  # 파일 경로 수정 가능
df = pd.read_csv(file_path)

# ---------------------------
# 3. 결측치 + [] 형태 모두 탐지
# ---------------------------
if "tag" not in df.columns:
    raise ValueError(" 'tag' 컬럼이 존재하지 않습니다.")

def is_missing_tag(val):
    """빈 태그 판별 (NaN, 빈 문자열, [], [''], 공백 등 모두 포함)"""
    if pd.isna(val):
        return True
    s = str(val).strip()
    return s in ["", "[]", "['']", "['nan']", "nan", "None"]

missing_tags = df[df["tag"].apply(is_missing_tag)].copy()

print(f" 태그 결측치 개수: {len(missing_tags)}")

# ---------------------------
# 4. LLM 프롬프트 템플릿 정의
# ---------------------------
def generate_prompt(row):
    """레시피 기반 태그 생성용 프롬프트 (정확 버전)"""
    recipe_nm_ko = str(row.get("recipe_nm_ko", "")).strip()
    ingredient_full = str(row.get("ingredient_full", "")).strip()
    step_text = str(row.get("step_text", "")).strip()

    if not any([recipe_nm_ko, ingredient_full, step_text]):
        return "이 레시피에는 정보가 없습니다. 태그를 생성하지 마세요."

    return f"""
당신은 한식·양식·중식 등 모든 요리에 정통한 **요리 데이터 전문가**이자,
요리 콘텐츠 분류를 위한 **ML 학습 데이터 태그러**입니다.

지금부터 주어지는 레시피 정보를 기반으로, 이 요리의 **핵심 특징을 설명하는 해시태그**를 만들어 주세요.

📘 레시피 정보:
- [요리 이름] {recipe_nm_ko}
- [재료 목록] {ingredient_full}
- [조리 단계 요약] {step_text}

🎯 태그 생성 규칙:
1. 음식의 **주재료, 조리법, 맛의 특징, 음식 종류, 식사 시간대, 나라/지역**을 반영하세요.
   (예: #닭요리 #한식 #매운맛 #조림요리 #저녁반찬)
2. 태그는 반드시 **3개 이상 7개 이하**로 생성하세요.
3. **'#'을 포함한 한 줄 문자열**로만 출력하세요. (예: `#닭볶음탕 #한식 #매운음식 #조림 #집밥`)
4. 불필요한 설명, 문장, 이모티콘 등은 절대 포함하지 마세요.
5. 요리 이름이 “닭”, “감자”, “두부”, “연두부”, “고등어”, “김치”, “된장” 등을 포함하면, 해당 재료 관련 태그를 반드시 포함하세요.
6. 조리 과정에 '볶다', '끓이다', '조리다', '굽다', '튀기다' 등의 단어가 있으면, 해당 조리법 태그를 반드시 추가하세요.
7. 레시피 설명이 부족하면 일반적인 추론으로 보완하세요.
   (예: '고추장'이 있으면 #매운맛, '연두부'가 있으면 #부드러운식감, '계란'이 있으면 #단백질음식)
8. 한국어로만 태그를 생성하세요. 영어는 포함하지 마세요.

⚠️ 출력 예시:
- 입력: 닭볶음탕, 재료=닭, 고추장, 감자 / 단계=끓인다, 졸인다
- 출력: #닭볶음탕 #한식 #닭요리 #매운음식 #조림요리 #집밥

- 입력: 연두부달걀탕, 재료=연두부, 달걀 / 단계=끓인다
- 출력: #연두부달걀탕 #한식 #부드러운식감 #간편요리 #두부요리 #국물요리

이제 위 규칙에 따라 태그를 생성하세요.
"""

# ---------------------------
# 5. LLM으로 태그 자동 생성
# ---------------------------
generated_tags = []
for _, row in tqdm(missing_tags.iterrows(), total=len(missing_tags), desc="🧠 LLM 태그 생성 중"):
    try:
        prompt = generate_prompt(row)
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "당신은 요리 데이터 분석 전문가이며, 레시피 데이터를 구조화합니다."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.3,
        )
        tag_text = response.choices[0].message.content.strip()
        print(f" [{row.name}] 태그 생성 완료: {tag_text}")
        generated_tags.append(tag_text)
    except Exception as e:
        print(f" 오류 발생 (index={row.name}): {e}")
        generated_tags.append("")

missing_tags["tag"] = generated_tags

# ---------------------------
# 6. 원본 df에 반영
# ---------------------------
df.loc[missing_tags.index, "tag"] = missing_tags["tag"]

# ---------------------------
# 7. 인덱스 재정렬 + 저장
# ---------------------------
df.reset_index(drop=True, inplace=True)
output_path = "recipe_by_type_tag_filled.csv"
df.to_csv(output_path, index=False, encoding="utf-8-sig")
print(f" 완료! 태그가 채워진 파일이 저장되었습니다: {output_path}")
